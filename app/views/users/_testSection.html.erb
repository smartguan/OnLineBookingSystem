<head>
	<title>View Registrations</title>
 	<style type="text/css">
 	.accordion#user-registrations {
 		width: 600px;
 		background-color: darkslategray;
 	}
  .spacer20 { height: 20px; width: 100%; font-size: 0; margin: 0; padding: 0; border: 0; display: block; }
 	.accordion-inner.registration{
 		/*background-color: lightgray;*/
 	}
  body {
    background-color: white;
  }
	</style>
</head>
<body>

<!-- Section placeholder -->
<div class="accordion span6" id="show-enrolled-sections"></div> 

<!-- error messages -->
<div id="err-message"></div>

</body>  

 <script type="text/javascript">
// "2013-04-01T05:30:29Z"
// day "THURSDAY"
// description "lhtlkhallsdfjalskdjfasl...kdfjlasj;zcxv\nasljsadfj"
// end_date "2014-03-13"
// end_time "2000-01-01T14:00:00Z"
// enroll_cur 3
// enroll_max 10
// id 3
// name "SUMMER2012"
// start_date "2013-03-31"
// start_time "2000-01-01T10:00:00Z"
// teacher "MR. MANLY MAN"
// updated_at "2013-04-12T17:49:43Z"
// waitlist_cur 0
// waitlist_max 10
// $(document).ready(function() {
// 	// section_type(string): A(M-Th) / B(Sat.Sun) / C(Individual). 
//   // lesson_type(string): private / pre-comp / group
//   $("#section-template").hide();
//   // init_view_user_sections();
// });
function getRandomNum(range) {
  return Math.floor(Math.random()*range);
}
function mock_missing_fields(section) {
  section.waitlist_pos = getRandomNum(10);
  section.section_type = getRandomNum(10);
  section.lesson_type = "A";
}


function handleViewSectionsResponse(data) {
  var error_code = data.errCode;
  var sections = data.sections;
  var error_msg = translateErrCode(error_code);

  function validSectionsExist(errCode, sections) { return (errCode==1 && sections.length > 0 ); }

  $('#err-message').empty();
  $('#err-message').append(error_msg);
  //alert(sections.length);
  if( validSectionsExist(error_code, sections) ) {
    Sections.renderHTML(sections);
  }
  return false;
}
function handleRegisterSectionResponse(data) {
 var error_code = data.errCode;
 var status_msg = translateErrCode(error_code);
 $('#err-message').empty();
 $('#err-message').append(status_msg);
  
 if(error_code == 1) {
   alert("Success");
 }
 else { 
   alert('failure');
 }
 return false;
}

var Sections = function(sectionsJSON) {
  this.all = sectionsJSON;
  for(i=0; i<sectionsJSON.length; i++) {
    this.all.push(sectionsJSON[i]);
  }
}

Sections.renderHTML = function(sections) {
    var enrolledSectionsId = "#show-enrolled-sections";
    for(i=0; i<sections.length; i++) { 
      var section = sections[i];
      // var section.start_date = (section.start_date===null || section.start_date===undefined) ? "" : section.start_date;
      // var section.end_date = (section.start_date===null || section.start_date===undefined) ? "" : section.start_date;
      // var date_range = new Range( parseDate_reservation(start_date), parseDate_reservation(end_date) );
      // var time_range = new Range( parseTime_reservation(start_time), parseTime_reservation(end_time) );

      var start_date = section.start_date === null ? "" : parseDate_reservation(section.start_date);
      var end_date = section.end_date === null ? "" : parseDate_reservation(section.end_date);
      var start_time = section.start_time === null ? "" : parseDate_reservation(section.start_time);
      var end_time = section.end_time === null ? "" : parseDate_reservation(section.end_time);

      var date_range = new Range( start_date, end_date );
      var time_range = new Range( start_time, end_time );
      var waitlist_frac = new Frac(section.waitlist_cur, section.waitlist_max);
      var enroll_frac = new Frac(section.enroll_cur, section.enroll_max);
      // alert(section.teacher);
      var section_attr = { 
        id : section.id,
        name : section.name,
        teacher : section.teacher,
        dates : date_range,
        time : time_range,
        waitlisted : waitlist_frac,
        enrolled : enroll_frac
      };
      mock_missing_fields(section_attr);
      // section["dow"] = translateDOW("A");

      var temp = new Section(section_attr);    
      // alert(temp);
      var temphtml = Section.renderHTML(temp,"Drop", dropSectionButtonClick).show() ;
      $(enrolledSectionsId).append(temphtml);
    }
    return true;
}


//Button definition
// var Button = function(title, size) {
//   this.title = title===undefined ? "" : title;
//   this.size = size===undefined ? "large" : size;  
//   this.getHTML = function() {
//     return "<button class=\"btn btn-" + this.size +  "btn-primary type=\"button\">" + this.title + "</button>";
//   }
// }
function dropSectionButtonClick(event) {
  return  post_json_request("/Registrations/drop", { section_id: event.data.section_id  }, handleRegisterSectionResponse );
}

function translateDOW(section_type) {
 var dow_enum = ["Mon", "Tues", "Wed", "Thurs", "Fri", "Sat", "Sun"];
 var  dow_out = "";
 var boolArray = [];
 if (section_type=="A") {
    boolArray = [true, true, true, true, true, false, false];
 }
 else if (section_type=="B") {
    boolArray = [false, false, false, false, false, true, true];
 }
 for(i=0; i<boolArray.length; i++) {
  dow_out += boolArray[i] ? dow_enum[i] + " " : "";
  // alert(dow_out);
 }
 return dow_out;
}

var Section = function( attributes, eventButton) {
  for (var key in attributes) {
    var val = attributes[key];
    this[key] = (val===null || val===undefined) ? "" : val;
  }
  this.eventButton = (button===undefined) ? "" : eventButton;
}
var Section = function( attributes) {
  for (var key in attributes) {
    this[key] = attributes[key];
  }
}

Section.renderHTML = function(section, buttonTitle, clickFunction) {
    var $section_clone = $('#section-template').clone().removeAttr('id');
    // $section_clone.find('.section-dow').prepend(translateDOW("A"));

    for (var key in section) {
      var val = section[key];
      // alert(val);
      var htmltag = ".section-" + key;
      $section_clone.find(htmltag).append(val.toString());
    }

    // handle bootstrap constraints
    $section_clone.find('.section-name').attr('href',("#section-"+section.id) );
    $section_clone.find('.section-body').attr('id',"section-"+ section.id);

    $section_clone.find('button').append(buttonTitle).on("click", { section_id: section.id }, clickFunction);
    
    return $section_clone;
}

var Range = function(start, end) {
  this.start = start;
  this.end = end;
}

Range.prototype.toString = function() {
  return this.start + " -- " + this.end; 
}

var Frac = function(numerator, demoninator) {
  this.numerator = numerator;
  this.demoninator = demoninator;
}
Frac.prototype.toString = function() {
  return this.numerator + "/" + this.demoninator;
}
</script>
